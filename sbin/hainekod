#!/bin/sh
# $Id: hainekod,v 1.22 2013/02/11 05:09:49 ak Exp $
# @(#) hainekod(8) - Start and stop haineko server
#  _           _            _             _ 
# | |__   __ _(_)_ __   ___| | _____   __| |
# | '_ \ / _` | | '_ \ / _ \ |/ / _ \ / _` |
# | | | | (_| | | | | |  __/   < (_) | (_| |
# |_| |_|\__,_|_|_| |_|\___|_|\_\___/ \__,_|
#                                           
readonly SYSTEMNAME='haineko'
readonly SYSVERSION="0.1.0"
readonly SERVERPROG='libexec/haineko.psgi'
readonly SCRIPTNAME="`basename $0`" # Called name.
readonly SCRIPTROOT="`dirname $0`/.."
readonly SERVERROOT="`(cd $SCRIPTROOT && pwd)`"
readonly SERVERPATH="$SERVERROOT/bin:$SERVERROOT/sbin"
readonly SERVERLIBS="$SERVERROOT/lib/perl5:$SERVEROOT/lib"

export LANG='C'
export PATH="$SERVERPATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
export LC_CTYPE='C'
export PERL5LIB="$SERVERLIBS:$PERL5LIB"

# * Error or exit status code. see sysexits.h
EX_OK=0         # operation completed successfully
EX_GENERAL=1    # generic error
EX_USAGE=64     # invalid option or argument
EX_SOFTWARE=70  # internal software error
EX_OSERR=71     # system error
EX_OSFILE=72    # critical OS file missing
EX_NOPERM=77    # permission denied
EX_CONFIG=78    # environment error

# * Values which is specified in commandline options
O_PLACKRUNNER="`which plackup`"
O_PIDFILENAME="$SERVERROOT/run/$SYSTEMNAME.pid"
O_SERVERSTATS="$SERVERROOT/run/$SYSTEMNAME.status"
O_HAINEKOCONF="$SERVERROOT/etc/haineko.cf"          # -C
O_HAINEKOPSGI="$SERVERROOT/libexec/haineko.psgi"    # -a: -a option argument of plackup

O_DEVELOPMENT='0'           # -d: Development mode, PLACK_ENV=development
O_HANDLERPROG=''            # -s: -s option argument of plackup
O_LISTENINGON='127.0.0.1'   # -h: -o option argument of plackup
O_BINDPORTNUM='2794'        # -p: -p option argument of plackup
O_WORKERPROCS='2'           # -w: --max_workers
O_INTERVALSEC='1'           # --interval

# * Other variables
C_DEBUGPRINT1=' *debug1:'
C_ERRORPRINT1=' *error1:'

printmessage() {
    #             _       _   
    #  _ __  _ __(_)_ __ | |_ 
    # | '_ \| '__| | '_ \| __|
    # | |_) | |  | | | | | |_ 
    # | .__/|_|  |_|_| |_|\__|
    # |_|                     
    local mesg="$1"     # ($1) message content
    local mark="$2"     # ($2) e=error, d=debug

    if [ -n "$TERM" ]; then

        if [ -n "$mark" ]; then
            if [ "$mark" = "e" ]; then
                mark=$C_ERRORPRINT1
            else
                mark=$C_DEBUGPRINT1
            fi
        else
            mark=$C_DEBUGPRINT1
        fi
        echo $mark $mesg > /dev/stderr
    fi
}

checkprocess() {
    #  _ __  _ __ ___   ___ ___  ___ ___ 
    # | '_ \| '__/ _ \ / __/ _ \/ __/ __|
    # | |_) | | | (_) | (_|  __/\__ \__ \
    # | .__/|_|  \___/ \___\___||___/___/
    # |_|                                
    local actionname="$1"
    local piddirname="`dirname $O_PIDFILENAME`"
    local processid1=0
    local hainekoapp="`basename $O_HAINEKOPSGI`"

    if [ ! -d $piddirname ]; then
        # If run/ directory is not writable, use /tmp instead.
        piddirname='/tmp'
        O_PIDFILENAME="/tmp/$SYSTEMNAME.pid"
    fi

    if [ -n "$actionname" ]; then
        # Remove or Create the pid file
        if [ "$actionname" = "remove" ]; then
            # Remove PID file
            rm -f $O_PIDFILENAME

        elif [ "$actionname" = "make" ]; then

            if [ -w "$piddirname" ]; then
                # Create PID file
                printmessage "Process id file = $O_PIDFILENAME"
                touch $O_PIDFILENAME
                echo $$ >> $O_PIDFILENAME

                if [ -n "$2" ]; then
                    echo $2 >> $O_PIDFILENAME
                fi
            else
                # Cannot create the pid file
                printmessage "Cannot create pid file: $O_PIDFILENAME" 'e'
                exit $EX_NOPERM
            fi

        elif [ "$actionname" = "list" ]; then

            if [ -f $O_PIDFILENAME ]; then
                processid1="`head -1 $O_PIDFILENAME`"
                ps axuww | grep plackup | grep $hainekoapp | grep -v grep | grep " $processid1 "
            else
                ps axuww | grep plackup | grep $hainekoapp | grep -v grep
            fi
        fi
    else
        # No action name in the arguments
        if [ -f $O_PIDFILENAME ]; then

            processid1="`head -1 $O_PIDFILENAME`"
            ps axuww | grep plackup | grep $hainekoapp | grep -v grep | grep " $processid1 " > /dev/null 2>&1

            if [ "$?" -eq "1" ]; then
                # pid file exists but hainekod process is not running.
                processid1=0
                rm -f $O_PIDFILENAME 2> /dev/null
            fi
        fi

        # Return process id
        echo $processid1
    fi
}

startserver() {
    #      _             _   
    #  ___| |_ __ _ _ __| |_ 
    # / __| __/ _` | '__| __|
    # \__ \ || (_| | |  | |_ 
    # |___/\__\__,_|_|   \__|
    #                        
    local processid1=`checkprocess`
    if [ $processid1 -ne "0" ]; then
        printmessage "Server is running, pid = $processid1" 'e'
        exit $EX_GENERAL
    fi

    if [ -x "$O_PLACKRUNNER" ]; then

        local hainekoapp="-a $O_HAINEKOPSGI"
        local serveropts=''
        local runneropts=''
        local wdirectory=''

        local daemonprog=''
        local daemonopts=''
        local runcommand=''

        printmessage "Listen = $O_LISTENINGON:$O_BINDPORTNUM"
        printmessage "PSGI Application = $O_HAINEKOPSGI"

        serveropts="$serveropts --host $O_LISTENINGON --port $O_BINDPORTNUM"
        serveropts="$serveropts -L Restarter"

        if [ -n "$O_HANDLERPROG" ]; then
            serveropts="$serveropts --server $O_HANDLERPROG"
            serveropts="$serveropts --max-workers=$O_WORKERPROCS"
            printmessage "Handler = $O_HANDLERPROG"
            printmessage "Workers = $O_WORKERPROCS"
        fi

        export HAINEKO_ROOT=$SERVERROOT
        export HAINEKO_CONF=$O_HAINEKOCONF

        if [ $O_DEVELOPMENT -eq "1" ]; then
            #  ____                 _                                  _   
            # |  _ \  _____   _____| | ___  _ __  _ __ ___   ___ _ __ | |_ 
            # | | | |/ _ \ \ / / _ \ |/ _ \| '_ \| '_ ` _ \ / _ \ '_ \| __|
            # | |_| |  __/\ V /  __/ | (_) | |_) | | | | | |  __/ | | | |_ 
            # |____/ \___| \_/ \___|_|\___/| .__/|_| |_| |_|\___|_| |_|\__|
            #                              |_|                             
            export PLACKENV='development'
            export HAINEKO_DEBUG=1

            if [ -f "${O_HAINEKOCONF}-debug" ]; then
                export HAINEKO_CONF=${O_HAINEKOCONF}-debug
                printmessage "Configuration file = ${O_HAINEKOCONF}-debug"
            fi
            printmessage 'Development mode = 1'
            printmessage 'PLACKENV = development'

            # Add -R,--Reload option
            wdirectory="$SERVERROOT/etc,$SERVERROOT/lib"
            serveropts="$serveropts -R $wdirectory"

            for D in `echo $wdirectory | tr ',' ' '`; do
                printmessage "Watching = $D"
            done

            # Build command line
            runneropts="`echo $serveropts $hainekoapp | tr -s ' '`"
            runcommand="$O_PLACKRUNNER $runneropts"

            printmessage "Run command = $runcommand"
            printmessage "Listen = $O_LISTENINGON:$O_BINDPORTNUM"
            exec $runcommand

        else
            #  ____                _            _   _             
            # |  _ \ _ __ ___   __| |_   _  ___| |_(_) ___  _ __  
            # | |_) | '__/ _ \ / _` | | | |/ __| __| |/ _ \| '_ \ 
            # |  __/| | | (_) | (_| | |_| | (__| |_| | (_) | | | |
            # |_|   |_|  \___/ \__,_|\__,_|\___|\__|_|\___/|_| |_|
            #                                                     
            export PLACKENV=''

            # Add --daemonize option
            serveropts="$serveropts --daemonize"
            runneropts="`echo $serveropts $hainekoapp | tr -s ' '`"
            daemonprog="`which start_server`"

            if [ -x "$daemonprog" ]; then
                #      _             _                                    
                #  ___| |_ __ _ _ __| |_     ___  ___ _ ____   _____ _ __ 
                # / __| __/ _` | '__| __|   / __|/ _ \ '__\ \ / / _ \ '__|
                # \__ \ || (_| | |  | |_    \__ \  __/ |   \ V /  __/ |   
                # |___/\__\__,_|_|   \__|___|___/\___|_|    \_/ \___|_|   
                #                      |_____|                            
                daemonopts="--port $O_BINDPORTNUM"
                daemonopts="$daemonopts --interval=$O_INTERVALSEC"
                daemonopts="$daemonopts --pid-file=$O_PIDFILENAME"
                daemonopts="$daemonopts --status-file=$O_SERVERSTATS"

                # Build command line
                runcommand="$daemonprog $daemonopts -- $O_PLACKRUNNER $runneropts"

                printmessage "Server starter = $daemonprog"
                printmessage "Respawn interval = $O_INTERVALSEC"
                printmessage "Process id file = $O_PIDFILENAME"

                exec nohup $runcommand > /dev/null &

            else
                #        _            _                
                #  _ __ | | __ _  ___| | ___   _ _ __  
                # | '_ \| |/ _` |/ __| |/ / | | | '_ \ 
                # | |_) | | (_| | (__|   <| |_| | |_) |
                # | .__/|_|\__,_|\___|_|\_\\__,_| .__/ 
                # |_|                           |_|    
                # No start_server script
                runcommand="$O_PLACKRUNNER $runneropts"
                printmessage "Run command = $runcommand"

                exec $runcommand
            fi
        fi

    elif [ -z "$O_PLACKRUNNER" ]; then
        # No plackup command
        printmessage "Command not found: $O_PLACKRUNNER" 'e'
        exit $EX_OSFILE

    else
        # plackup
        printmessage "Cannot execute $O_PLACKRUNNER" 'e'
        exit $EX_NOPERM
    fi

}

serverctrl() {
    #      _                _                 _             _    
    #  ___| |_ ___  _ __   | |  _ __ ___  ___| |_ __ _ _ __| |_  
    # / __| __/ _ \| '_ \  | | | '__/ _ \/ __| __/ _` | '__| __| 
    # \__ \ || (_) | |_) | | | | | |  __/\__ \ || (_| | |  | |_  
    # |___/\__\___/| .__/  | | |_|  \___||___/\__\__,_|_|   \__| 
    #              |_|     |_|                                   
    local actionname="$1"
    local processid1=`checkprocess`

    if [ -n "$actionname" ]; then

        if [ "$processid1" -eq "0" ]; then

            if [ -f "$O_PIDFILENAME" ]; then
                # No process
                printmessage "Server is not running" 'e'
                exit $EX_GENERAL
            else
                # no pid file
                printmessage 'pid file does not exist' 'e'
                exit $EX_GENERAL
            fi

        else
            # Server is running
            if [ "X$actionname" = "Xstop" ]; then
                # Stop server
                kill -TERM $processid1
                checkprocess remove

                if [ "$?" -eq "0" ]; then
                    printmessage "Server stopped: pid = $processid1"
                else
                    printmessage "Failed to stop server: pid = $processid1" 'e'
                fi

            elif [ "X$actionname" = "Xrestart" ]; then
                # Restart server
                kill -HUP $processid1

                if [ "$?" -eq "0" ]; then
                    printmessage "Server restarted: pid = $processid1"
                else
                    printmessage "Failed to restart server: pid = $processid1" 'e'
                fi
            fi
        fi
    fi
}

help() {
    #  _          _       _ 
    # | |__   ___| |_ __ | |
    # | '_ \ / _ \ | '_ \| |
    # | | | |  __/ | |_) |_|
    # |_| |_|\___|_| .__/(_)
    #              |_|      
    echo
    echo 'usage:'
    echo " $SCRIPTNAME COMMAND [ OPTION [ARGV] ]"
    echo
    echo '  * Commands'
    echo '     start        : Start server'
    echo '     stop         : Stop server'
    echo '     restart      : Restart server'
    echo '     status       : Show processes'
    echo
    echo '  * Daemon options'
    echo '     -a <app>     : Path to haineko.psgi, default = '$O_HAINEKOPSGI
    echo '     -C <conf>    : Path to haineko.cf, default = '$O_HAINEKOCONF
    echo '     -d           : Development mode: PLACK_ENV=development'
    echo '     -h <host>    : Host name to listen, default = '$O_LISTENINGON
    echo '     -p <port>    : Port number to bind(HTTP), default = '$O_BINDPORTNUM
    echo '     -s <server>  : Plack handler name, default = Standalone'
    echo '     -w <worker>  : The number of max workers'
    echo
    echo '  * Other options'
    echo '     -H           : Show this screen(help).'
    echo "     -V           : Print $SCRIPTNAME version"
    echo 
}

#              _   _                 
#   ___  _ __ | |_(_) ___  _ __  ___ 
#  / _ \| '_ \| __| |/ _ \| '_ \/ __|
# | (_) | |_) | |_| | (_) | | | \__ \
#  \___/| .__/ \__|_|\___/|_| |_|___/
#       |_|                          
while getopts ":a:C:dHh:p:s:Vw:" opt; do
    case $opt in
        a)
            O_HAINEKOPSGI="$OPTARG"
            ;;
        C)
            O_HAINEKOCONF="$OPTARG"
            ;;
        d)
            O_DEVELOPMENT=1
            ;;
        h)
            O_LISTENINGON="$OPTARG"
            ;;
        p)
            O_BINDPORTNUM="$OPTARG"
            ;;
        s)
            O_HANDLERPROG="$OPTARG"
            ;;
        w)
            O_WORKERPROCS="$OPTARG"
            ;;
        H)
            help
            exit $EX_OK
            ;;
        V)
            echo $SYSVERSION
            exit $EX_OK
            ;;
        \?|*)
            help
            exit $EX_OK
            ;;
    esac
done

shift `expr ${OPTIND} - 1`

#                                                _ 
#   ___ ___  _ __ ___  _ __ ___   __ _ _ __   __| |
#  / __/ _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` |
# | (_| (_) | | | | | | | | | | | (_| | | | | (_| |
#  \___\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|
#                                                  
case "$1" in
    start)
        startserver
        ;;
    stop)
        serverctrl stop
        ;;
    restart)
        serverctrl restart
        ;;
    status)
        checkprocess list
        ;;
    help)
        help
        ;;
    *)
        echo "try $SCRIPTNAME help"
        exit $EX_USAGE
        ;;
esac

